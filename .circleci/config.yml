version: 2.0
jobs:
  gcc_unit:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout
      # GCC
      - run:
          name: GCC build + unit testing + MPI
          command: |
            mkdir -p build
            [ "$(ls -A build)" ] && rm -rf build/*
            cd build
            source /etc/profile.d/modules.sh
            export MODULEPATH=$MODULEPATH:/usr/share/modulefiles
            module load mpi/openmpi-x86_64
            export CXX_COMPILER=mpicxx
            export PETSC_ARCH=arch-linux2-c-opt
            export PETSC_DIR=/home/cbgeo/petsc/
            cmake -GNinja -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DKAHIP_ROOT=/home/cbgeo/KaHIP/ -DPARTIO_ROOT=/home/cbgeo/partio/ ..
            ninja -j2 mpmtest_unit
            ctest -VV -R mpmtest_unit
            mpirun -n 4 ./mpmtest_unit [mpi]
  gcc_small:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout
      # GCC
      - run:
          name: GCC build + small testing
          command: |
            mkdir -p build
            [ "$(ls -A build)" ] && rm -rf build/*
            cd build
            source /etc/profile.d/modules.sh
            export MODULEPATH=$MODULEPATH:/usr/share/modulefiles
            module load mpi/openmpi-x86_64
            export CXX_COMPILER=mpicxx
            export PETSC_ARCH=arch-linux2-c-opt
            export PETSC_DIR=/home/cbgeo/petsc/
            cmake -GNinja -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DKAHIP_ROOT=/home/cbgeo/KaHIP/ -DPARTIO_ROOT=/home/cbgeo/partio/ ..
            ninja -j2 mpmtest_small
            ctest -VV -R mpmtest_small
  clang:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout
      # Clang
      - run:
          name: Clang + Static analysis
          command: |
            mkdir -p build
            [ "$(ls -A build)" ] && rm -rf build/*
            cd build
            export PETSC_ARCH=arch-linux2-c-opt
            export PETSC_DIR=/home/cbgeo/petsc/
            scan-build cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DKAHIP_ROOT=/home/cbgeo/KaHIP/ -DPARTIO_ROOT=/home/cbgeo/partio/ ..
            scan-build -k -V ninja -j2
            ctest -VV
  cppcheck:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout
      - run:
          name: cppcheck/clang-format
          command: |
            cppcheck --version
            cppcheck --inline-suppr --enable=warning --inconclusive --force --language=c++ --std=c++11 src/*.cc include/*.h include/*.tcc --error-exitcode=1
      # clang-format
      - run:
          name: clang-format
          command: |
            python3 ./clang-tools/run-clang-format.py -r include/* src/* tests/*

  codecov_unit:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout

      # codecoverage
      - run:
          name: codecov.io
          command: |
            mkdir -p build
            [ "$(ls -A build)" ] && rm -rf build/*
            cd build
            export PETSC_ARCH=arch-linux2-c-opt
            export PETSC_DIR=/home/cbgeo/petsc/
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DENABLE_COVERAGE=On -DKAHIP_ROOT=/home/cbgeo/KaHIP/ -DPARTIO_ROOT=/home/cbgeo/partio/ ..
            make mpmtest_coverage_unit -j4
            ./mpmtest_coverage_unit
            mpirun -n 4 ./mpmtest_coverage_unit [mpi]
            lcov --directory . --capture --output-file coverage_unit.info
            bash <(curl -s https://codecov.io/bash) -f coverage_unit.info || echo "Codecov did not collect coverage reports"

  codecov_small:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout

      # codecoverage
      - run:
          name: codecov.io
          command: |
            mkdir -p build
            [ "$(ls -A build)" ] && rm -rf build/*
            cd build
            export PETSC_ARCH=arch-linux2-c-opt
            export PETSC_DIR=/home/cbgeo/petsc/
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DENABLE_COVERAGE=On -DKAHIP_ROOT=/home/cbgeo/KaHIP/ -DPARTIO_ROOT=/home/cbgeo/partio/ ..
            make mpmtest_coverage_small -j4
            ./mpmtest_coverage_small
            mpirun -n 4 ./mpmtest_coverage_small [mpi]
            lcov --directory . --capture --output-file coverage_small.info
            bash <(curl -s https://codecov.io/bash) -f coverage_small.info || echo "Codecov did not collect coverage reports"


  benchmarks:
    docker:
      - image: quay.io/cbgeo/mpm
    resource_class: large
    steps:
      - checkout
      # GCC
      - run:
          name: GCC build + MPI
          command: |
            mkdir -p build
            [ "$(ls -A build)" ] && rm -rf build/*
            cd build
            source /etc/profile.d/modules.sh
            export MODULEPATH=$MODULEPATH:/usr/share/modulefiles
            module load mpi/openmpi-x86_64
            export CXX_COMPILER=mpicxx
            cmake -GNinja -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DKAHIP_ROOT=/home/cbgeo/KaHIP/ -DPARTIO_ROOT=/home/cbgeo/partio/ ..
            ninja -j2
            ctest -VV
            mpirun -n 4 ./mpmtest [mpi]
      # Benchmarks
      - run:
          name: Clone benchmarks
          command: |
            cd /home/cbgeo/project/build
            git clone https://github.com/geomechanics/mpm-examples.git benchmarks
      # Benchmarks
      - run:
          name: 2D sliding block
          command: |
            cd /home/cbgeo/project/build
            pip3 install tables --user
            export OMP_NUM_THREADS=1
            mpirun -n 4 ./mpm -f ./benchmarks/explicit_single_phase/validation/sliding_block_inclined_boundary/inputs/
            python3 ./benchmarks/explicit_single_phase/validation/sliding_block_inclined_boundary/inputs/test_benchmark.py
      # Stress
      - run:
          name: Uniaxial stress
          command: |
            cd /home/cbgeo/project/build
            ./mpm -f ./benchmarks/explicit_single_phase/validation/uniaxial_stress/inputs/
            python3 ./benchmarks/explicit_single_phase/validation/uniaxial_stress/inputs/test_benchmark.py
      # Traction
      - run:
          name: Uniaxial traction
          command: |
            cd /home/cbgeo/project/build
            export OMP_NUM_THREADS=2
            ./mpm -f ./benchmarks/explicit_single_phase/validation/uniaxial_traction/inputs/ -i mpm-nodal-forces.json
            ./mpm -f ./benchmarks/explicit_single_phase/validation/uniaxial_traction/inputs/ -i mpm-particle-traction.json
            python3 ./benchmarks/explicit_single_phase/validation/uniaxial_traction/inputs/test_benchmark.py

workflows:
    version: 2
    build:
        jobs:
            - gcc_unit
            - gcc_small
            - clang
            - cppcheck
            - codecov_unit
            - codecov_small
    nightly:
        jobs:
            - benchmarks
        triggers:
            - schedule:
                cron: "0 0 * * *"
                filters:
                    branches:
                        only:
                          - master
